{"version":3,"sources":["Components/Menu/Menu.jsx","Components/Hero/Hero.jsx","Components/Home/Home.jsx","Components/StationPicker/StationPicker.jsx","Components/Ride/Ride.jsx","Components/Trains/Trains.jsx","Components/Station/Station.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","src","alt","Button","Hero","style","backgroundImage","Home","StationPicker","props","DropdownButton","id","title","allStations","map","eachStation","i","Dropdown","Item","href","StationID","key","Station","Ride","Trains","generateTrains","north","south","northTrains","train","data","Record","trainStyles","LineID","TrainID","console","log","cars","carPrint","southTrains","carsArray","eachItem","allTrainKeys","Object","keys","trains","forEach","startsWith","push","generateTrainList","state","ready","station","northTrain1","name","northTrain2","northTrain3","southTrain1","southTrain2","southTrain3","updateStation","a","Axios","get","result","setState","RecordSet","updateTrains","names","update","loadCars","Cars","split","printTrains","this","StationName","Component","App","axios","then","res","stationArray","exact","path","render","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"mbAOe,SAASA,IACtB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBACED,UAAU,WACVE,IAAI,yBACJC,IAAI,gBAGR,kBAAC,IAAD,CAAMH,UAAU,YAAYC,GAAG,KAC7B,gDAGJ,yBAAKD,UAAU,aACb,kBAAC,IAAD,CAAMC,GAAG,SACP,kBAACG,EAAA,EAAD,CAAQJ,UAAU,cAAlB,cAEF,kBAACI,EAAA,EAAD,CAAQJ,UAAU,cAAlB,cACA,kBAACI,EAAA,EAAD,CAAQJ,UAAU,cAAlB,e,MCxBK,SAASK,IACtB,OACE,yBACEL,UAAU,iBACVM,MAAO,CAAEC,gBAAiB,8CAE1B,yBAAKP,UAAU,kBACb,wBAAIA,UAAU,cAAd,6BACA,uBAAGA,UAAU,aAAb,wMCRO,SAASQ,IACtB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,O,0BCJS,SAASC,EAAcC,GAkBpC,OAAO,6BALH,kBAACC,EAAA,EAAD,CAAgBC,GAAG,wBAAwBC,MAAM,uBAX5CH,EAAMI,YAAYC,KAAI,SAACC,EAAaC,GACzC,OACE,kBAACC,EAAA,EAASC,KAAV,CAAeC,KAAI,iBAAYJ,EAAYK,WAAaC,IAAKL,GAC1DD,EAAYO,cCHR,SAASC,EAAKd,GAC3B,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKV,UAAU,qBACb,kBAACS,EAAD,iBAAmBC,EAAnB,CAA0BI,YAAaJ,EAAMI,iB,2CCRtC,SAASW,EAAOf,GAC7B,IAiBIgB,EAAiB,SAACC,EAAOC,GAC3B,IAAIC,EAAcF,EAAMZ,KAAI,SAACe,EAAOb,GAElC,GAAyB,MAArBa,EAAMC,KAAKC,OAAgB,CAC7B,IACIC,EAAc,SADPH,EAAMC,KAAKC,OAAOE,OAE7B,OACE,yBAAKZ,IAAKL,GACR,wBAAIjB,UAAWiC,GAAcH,EAAMC,KAAKC,OAAOG,SAC9CC,QAAQC,IAAIP,EAAMQ,KAAM,eACzB,yBAAKtC,UAAU,QAAQuC,EAAST,EAAMQ,QAI1C,OACE,wBAAIhB,IAAKL,EAAGjB,UAAU,SAAtB,uBAMFwC,EAAcZ,EAAMb,KAAI,SAACe,EAAOb,GAClC,GAAyB,MAArBa,EAAMC,KAAKC,OAAgB,CAC7B,IACIC,EAAc,SADPH,EAAMC,KAAKC,OAAOE,OAG7B,OACE,yBAAKZ,IAAKL,GACR,wBAAIK,IAAKL,EAAGjB,UAAWiC,GACpBH,EAAMC,KAAKC,OAAOG,SAErB,yBAAKnC,UAAU,QAAQuC,EAAST,EAAMQ,QAI1C,OACE,wBAAIhB,IAAKL,EAAGjB,UAAU,SAAtB,uBAmBN,OAZE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,yBACb,0CACA,yBAAKA,UAAU,mBAAmB6B,IAEpC,yBAAK7B,UAAU,yBACb,0CACA,yBAAKA,UAAU,mBAAmBwC,MAOtCD,EAAW,SAAAE,GAWb,OAVAL,QAAQC,IAAI,eAAgBI,GACjBA,EAAU1B,KAAI,SAAC2B,EAAUzB,GAElC,OADAmB,QAAQC,IAAIK,GAEV,6BACE,uBAAGpB,IAAKL,GAAIyB,QASpB,OAFAN,QAAQC,IAAI3B,GAGV,6BACE,yCA3FoB,WACtB,IAAIiC,EAAeC,OAAOC,KAAKnC,EAAMoC,QACjCjB,EAAc,GACdW,EAAc,GAWlB,OATAG,EAAaI,SAAQ,SAAAjB,IACe,IAA9BA,EAAMkB,WAAW,UACnBnB,EAAYoB,KAAKvC,EAAMoC,OAAOhB,KAEE,IAA9BA,EAAMkB,WAAW,UACnBR,EAAYS,KAAKvC,EAAMoC,OAAOhB,OAI3BJ,EAAeG,EAAaW,GA8EhCU,I,mkBCxFc3B,E,2MACnB4B,MAAQ,CACNC,OAAO,EACPC,QAAS,GACTP,OAAQ,CACNQ,YAAa,CACXC,KAAM,iBACNxB,KAAM,GACNO,KAAM,IAERkB,YAAa,CACXD,KAAM,iBACNxB,KAAM,GACNO,KAAM,IAERmB,YAAa,CACXF,KAAM,iBACNxB,KAAM,GACNO,KAAM,IAERoB,YAAa,CACXH,KAAM,iBACNxB,KAAM,GACNO,KAAM,IAERqB,YAAa,CACXJ,KAAM,iBACNxB,KAAM,GACNO,KAAM,IAERsB,YAAa,CAAEL,KAAM,iBAAkBxB,KAAM,GAAIO,KAAM,M,EAQ3DuB,c,sBAAgB,4BAAAC,EAAA,sEACKC,IAAMC,IAAN,kFAC0D,EAAKtD,MAAMW,YAF1E,OACV4C,EADU,OAId,EAAKC,SACH,CAAEb,QAASY,EAAOlC,KAAKoC,UAAUnC,OAAQoB,OAAO,IAChD,WACE,EAAKgB,kBAPK,2C,EAYhBA,aAAe,WACb,IAAIC,EAAQ,EAAKlB,MAAML,OAEvBF,OAAOC,KAAKwB,GAAOtD,IAAnB,iBAAA6B,OAAA,IAAAA,CAAA,UAAuB,WAAMd,GAAN,eAAAgC,EAAA,sEACFC,IAAMC,IAAN,0EAEf,EAAKb,MAAME,QAAQgB,EAAMvC,GAAOyB,QAHf,OACjBe,EADiB,OAOyB,QAA1C,EAAKnB,MAAME,QAAQgB,EAAMvC,GAAOyB,QAClCe,EAAOvC,KAAKoC,UAAY,gDAG1BE,EAAMvC,GAAN,KACKuC,EAAMvC,GADX,CAEEC,KAAMuC,EAAOvC,KAAKoC,YAGpB,EAAKD,SAAS,CAAEpB,OAAQuB,IAAS,kBAAM,EAAKE,SAASzC,MAhBhC,2CAAvB,wD,EAoBFyC,SAAW,SAAAzC,GACT,IAAIQ,EACAQ,EAAS,EAAKK,MAAML,OAGtBR,EADyB,iDAAvBQ,EAAOhB,GAAOC,KACTe,EAAOhB,GAAOC,KAAKC,OAAOwC,KAAKC,MAAM,KAErC,wBAGT3B,EAAOhB,GAAOQ,KAAOA,EAErB,EAAK4B,SAAS,CAAEpB,OAAQA,EAAQM,OAAO,K,EAGzCsB,YAAc,WACZ,IAAyB,IAArB,EAAKvB,MAAMC,MACb,OAAO,kBAAC,EAAW,EAAKD,Q,mFAxD1BwB,KAAKd,kB,+BAkEL,OALIc,KAAKjE,MAAMW,YAAcsD,KAAKxB,MAAME,QAAQhC,WAC9CsD,KAAKd,gBAKL,6BACE,kBAAC,EAAD,iBAAUc,KAAKjE,MAAf,CAAsBI,YAAa6D,KAAKjE,MAAMI,eAC9C,0CAAgB6D,KAAKxB,MAAME,QAAQuB,YAAnC,YACCD,KAAKD,mB,GAxGuBG,aCKhBC,G,iNACnB3B,MAAQ,CACNrC,YAAa,I,mFAGM,IAAD,OAElBiE,IACGf,IADH,kEAEGgB,MAAK,SAAAC,GACJ,IAEIC,EAFcD,EAAIlD,KAAKoC,UAAUnC,OAENjB,KAAI,SAAAC,GAGjC,MAAO,CAAEK,UAFAL,EAAYK,UAEGE,QADNP,EAAYO,YAIhC,EAAK2C,SAAS,CAAEpD,YAAaoE,S,+BAIzB,IAAD,OACP,OACE,yBAAKlF,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmF,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA3E,GAAK,OAAI,kBAACF,EAASE,MACjD,kBAAC,IAAD,CACEyE,OAAK,EACLC,KAAK,QACLC,OAAQ,SAAA3E,GAAK,OACX,kBAAC,EAAD,iBAAUA,EAAV,CAAiBI,YAAa,EAAKqC,MAAMrC,kBAG7C,kBAAC,IAAD,CACEqE,OAAK,EACLC,KAAK,mBACLC,OAAQ,SAAA3E,GAAK,OACX,kBAAC,EAAD,iBACMA,EADN,CAEEI,YAAa,EAAKqC,MAAMrC,YACxBO,UAAWX,EAAM4E,MAAMC,OAAOlE,sB,GAzCbwD,c,YCDbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCJNM,IAASP,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAc5C,MAAM4B,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.7b5f3842.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Styling\nimport Button from \"react-bootstrap/Button\";\nimport \"./Menu.css\";\n\nexport default function Nav() {\n  return (\n    <div className=\"nav-container\">\n      <nav className=\"nav-content\">\n        <div className=\"nav-left\">\n          <Link to=\"/\">\n            <img\n              className=\"nav-icon\"\n              src=\"./icons/train_icon.png\"\n              alt=\"train icon\"\n            />\n          </Link>\n          <Link className=\"nav-title\" to=\"/\">\n            <h1>WinningTransit</h1>\n          </Link>\n        </div>\n        <div className=\"nav-right\">\n          <Link to=\"/ride\">\n            <Button className=\"nav-button\">Next Ride</Button>\n          </Link>\n          <Button className=\"nav-button\">Contribute</Button>\n          <Button className=\"nav-button\">Feedback</Button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./Hero.css\";\n\nexport default function Hero() {\n  return (\n    <div\n      className=\"hero-container\"\n      style={{ backgroundImage: 'url(\"./img/brickellSouthboundTrain1.png\")' }}\n    >\n      <div className=\"hero-text-area\">\n        <h1 className=\"hero-title\">Welcome to WinningTransit</h1>\n        <p className=\"hero-text\">\n          There are many factors in life that are uncontrollable but the quality\n          of your train car does not have to be one of them. Be a part of our\n          community and learn to choose wisely on your next ride.\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Menu from \"../Menu/Menu\";\nimport Hero from \"../Hero/Hero\";\nexport default function Home() {\n  return (\n    <div>\n      <Menu />\n      <Hero />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nexport default function StationPicker(props) {\n  let printStations = () => {\n    return props.allStations.map((eachStation, i) => {\n      return (\n        <Dropdown.Item href={`#/ride/${eachStation.StationID}`} key={i}>\n          {eachStation.Station}\n        </Dropdown.Item>\n      );\n    });\n  };\n\n  let buildDropdown = () => {\n    return (\n      <DropdownButton id=\"dropdown-basic-button\" title=\"Choose Your Station\">\n        {printStations()}\n      </DropdownButton>\n    );\n  };\n  return <div>{buildDropdown()}</div>;\n}\n","import React from \"react\";\n\nimport \"./Ride.css\";\nimport Menu from \"../Menu/Menu\";\nimport StationPicker from \"../StationPicker/StationPicker\";\n\nexport default function Ride(props) {\n  return (\n    <div>\n      <Menu />\n      <div className=\"ride-page-content\">\n        <StationPicker {...props} allStations={props.allStations} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./Trains.css\";\nexport default function Trains(props) {\n  let generateTrainList = () => {\n    let allTrainKeys = Object.keys(props.trains);\n    let northTrains = [];\n    let southTrains = [];\n\n    allTrainKeys.forEach(train => {\n      if (train.startsWith(\"north\") === true) {\n        northTrains.push(props.trains[train]);\n      }\n      if (train.startsWith(\"south\") === true) {\n        southTrains.push(props.trains[train]);\n      }\n    });\n    // console.log(northTrains, southTrains);\n    return generateTrains(northTrains, southTrains);\n  };\n\n  let generateTrains = (north, south) => {\n    let northTrains = north.map((train, i) => {\n      //   this.loadCars(train);\n      if (train.data.Record != null) {\n        let line = train.data.Record.LineID;\n        let trainStyles = \"train \" + line;\n        return (\n          <div key={i}>\n            <h4 className={trainStyles}>{train.data.Record.TrainID}</h4>\n            {console.log(train.cars, \"***********\")}\n            <div className=\"cars\">{carPrint(train.cars)}</div>\n          </div>\n        );\n      } else {\n        return (\n          <h4 key={i} className=\"train\">\n            Data unavailable\n          </h4>\n        );\n      }\n    });\n    let southTrains = south.map((train, i) => {\n      if (train.data.Record != null) {\n        let line = train.data.Record.LineID;\n        let trainStyles = \"train \" + line;\n\n        return (\n          <div key={i}>\n            <h4 key={i} className={trainStyles}>\n              {train.data.Record.TrainID}\n            </h4>\n            <div className=\"cars\">{carPrint(train.cars)}</div>\n          </div>\n        );\n      } else {\n        return (\n          <h4 key={i} className=\"train\">\n            Data unavailable\n          </h4>\n        );\n      }\n    });\n    let allTrains = (\n      <div className=\"trains-container\">\n        <div className=\"north-bound-container\">\n          <h3>Northbound</h3>\n          <div className=\"train-container\">{northTrains}</div>\n        </div>\n        <div className=\"south-bound-container\">\n          <h3>Southbound</h3>\n          <div className=\"train-container\">{southTrains}</div>\n        </div>\n      </div>\n    );\n    // console.log(northTrains);\n    return allTrains;\n  };\n  let carPrint = carsArray => {\n    console.log(\"=-=-=-=-=-=-\", carsArray);\n    let cars = carsArray.map((eachItem, i) => {\n      console.log(eachItem);\n      return (\n        <div>\n          <p key={i}>{eachItem}</p>\n        </div>\n      );\n    });\n\n    return cars;\n  };\n  console.log(props);\n  //   console.log(generateTrainList());\n  return (\n    <div>\n      <h2>In Trains</h2>\n      {generateTrainList()}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport Ride from \"../Ride/Ride\";\nimport Trains from \"../Trains/Trains\";\nimport Axios from \"axios\";\n\nimport \"./Station.css\";\n\nexport default class Station extends Component {\n  state = {\n    ready: false,\n    station: {},\n    trains: {\n      northTrain1: {\n        name: \"NB_Time1_Train\",\n        data: {},\n        cars: []\n      },\n      northTrain2: {\n        name: \"NB_Time2_Train\",\n        data: {},\n        cars: []\n      },\n      northTrain3: {\n        name: \"NB_Time3_Train\",\n        data: {},\n        cars: []\n      },\n      southTrain1: {\n        name: \"SB_Time1_Train\",\n        data: {},\n        cars: []\n      },\n      southTrain2: {\n        name: \"SB_Time2_Train\",\n        data: {},\n        cars: []\n      },\n      southTrain3: { name: \"SB_Time3_Train\", data: {}, cars: [] }\n    }\n  };\n  componentDidMount() {\n    this.updateStation();\n    // this.generateTrainList();\n  }\n\n  updateStation = async () => {\n    let result = await Axios.get(\n      `https://miami-transit-api.herokuapp.com/api/TrainTracker.json?StationID=${this.props.StationID}`\n    );\n    this.setState(\n      { station: result.data.RecordSet.Record, ready: false },\n      () => {\n        this.updateTrains();\n      }\n    );\n  };\n\n  updateTrains = () => {\n    let names = this.state.trains;\n\n    Object.keys(names).map(async train => {\n      let update = await Axios.get(\n        `https://miami-transit-api.herokuapp.com/api/Trains.json?TrainID=${\n          this.state.station[names[train].name]\n        }`\n      );\n\n      if (this.state.station[names[train].name] === \"SCH\") {\n        update.data.RecordSet = \"Data currently not available for this train.\";\n      }\n\n      names[train] = {\n        ...names[train],\n        data: update.data.RecordSet\n      };\n\n      this.setState({ trains: names }, () => this.loadCars(train));\n    });\n  };\n\n  loadCars = train => {\n    let cars;\n    let trains = this.state.trains;\n\n    if (trains[train].data !== \"Data currently not available for this train.\") {\n      cars = trains[train].data.Record.Cars.split(\"-\");\n    } else {\n      cars = \"Car data unavailable.\";\n    }\n\n    trains[train].cars = cars;\n\n    this.setState({ trains: trains, ready: true });\n  };\n\n  printTrains = () => {\n    if (this.state.ready === true) {\n      return <Trains {...this.state} />;\n    }\n  };\n\n  render() {\n    if (this.props.StationID !== this.state.station.StationID) {\n      this.updateStation();\n      // this.generateTrainList();\n    }\n\n    return (\n      <div>\n        <Ride {...this.props} allStations={this.props.allStations} />\n        <h1>Welcome to {this.state.station.StationName} Station</h1>\n        {this.printTrains()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Component } from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route } from \"react-router-dom\";\n\n// Components\nimport Home from \"./Components/Home/Home\";\nimport Ride from \"./Components/Ride/Ride\";\nimport Station from \"./Components/Station/Station\";\n\n// Styling\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    allStations: []\n  };\n\n  componentDidMount() {\n    // Get Station Data\n    axios\n      .get(`https://miami-transit-api.herokuapp.com/api/TrainStations.json`)\n      .then(res => {\n        let stationData = res.data.RecordSet.Record;\n\n        let stationArray = stationData.map(eachStation => {\n          let id = eachStation.StationID;\n          let stationName = eachStation.Station;\n          return { StationID: id, Station: stationName };\n        });\n\n        this.setState({ allStations: stationArray });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={props => <Home {...props} />} />\n          <Route\n            exact\n            path=\"/ride\"\n            render={props => (\n              <Ride {...props} allStations={this.state.allStations} />\n            )}\n          />\n          <Route\n            exact\n            path=\"/ride/:StationID\"\n            render={props => (\n              <Station\n                {...props}\n                allStations={this.state.allStations}\n                StationID={props.match.params.StationID}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// Create the collection\n// axios\n//   .post(\"https://ironrest.herokuapp.com/createCollection/winningTransit\")\n//   .then(res => {\n//     console.log(res.data);\n//   });\n\n// Post to the collection\n// axios\n//   .post(\"https://ironrest.herokuapp.com/winningTransit\", {\n//     testing: \"Winning\"\n//   })\n//   .then(res => {\n//     console.log(res.data);\n//   });\n\n// Delete an item from the collection.\n// axios\n//   .delete(\n//     \"https://ironrest.herokuapp.com/winningTransit/5dd43f3e7b55290017a2b1aa\"\n//   )\n//   .then(res => {\n//     console.log(res.data);\n//   });\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\n// Components\nimport App from \"./App\";\n\n// Styling\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Services\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}