{"version":3,"sources":["Components/Menu/Menu.jsx","Components/Hero/Hero.jsx","Components/Home/Home.jsx","Components/StationPicker/StationPicker.jsx","Components/Ride/Ride.jsx","Components/Station/Station.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","src","alt","Button","Hero","style","backgroundImage","Home","StationPicker","props","DropdownButton","id","title","allStations","map","eachStation","i","Dropdown","Item","href","StationID","key","Station","Ride","state","station","trains","northTrain1","name","data","cars","northTrain2","northTrain3","southTrain1","southTrain2","southTrain3","updateStation","a","Axios","get","result","setState","RecordSet","Record","updateTrains","prop","names","Object","keys","train","update","this","StationName","Component","App","axios","then","res","stationArray","exact","path","render","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8cda9bf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Styling\nimport Button from \"react-bootstrap/Button\";\nimport \"./Menu.css\";\n\nexport default function Nav() {\n  return (\n    <div className=\"nav-container\">\n      <nav className=\"nav-content\">\n        <div className=\"nav-left\">\n          <Link to=\"/\">\n            <img\n              className=\"nav-icon\"\n              src=\"./icons/train_icon.png\"\n              alt=\"train icon\"\n            />\n          </Link>\n          <Link className=\"nav-title\" to=\"/\">\n            <h1>WinningTransit</h1>\n          </Link>\n        </div>\n        <div className=\"nav-right\">\n          <Link to=\"/ride\">\n            <Button className=\"nav-button\">Next Ride</Button>\n          </Link>\n          <Button className=\"nav-button\">Contribute</Button>\n          <Button className=\"nav-button\">Feedback</Button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./Hero.css\";\n\nexport default function Hero() {\n  return (\n    <div\n      className=\"hero-container\"\n      style={{ backgroundImage: 'url(\"./img/brickellSouthboundTrain1.png\")' }}\n    >\n      <div className=\"hero-text-area\">\n        <h1 className=\"hero-title\">Welcome to WinningTransit</h1>\n        <p className=\"hero-text\">\n          There are many factors in life that are uncontrollable but the quality\n          of your train car does not have to be one of them. Be a part of our\n          community and learn to choose wisely on your next ride.\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Menu from \"../Menu/Menu\";\nimport Hero from \"../Hero/Hero\";\nexport default function Home() {\n  return (\n    <div>\n      <Menu />\n      <Hero />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nexport default function StationPicker(props) {\n  let printStations = () => {\n    return props.allStations.map((eachStation, i) => {\n      return (\n        <Dropdown.Item href={`#/ride/${eachStation.StationID}`} key={i}>\n          {eachStation.Station}\n        </Dropdown.Item>\n      );\n    });\n  };\n\n  let buildDropdown = () => {\n    return (\n      <DropdownButton id=\"dropdown-basic-button\" title=\"Choose Your Station\">\n        {printStations()}\n      </DropdownButton>\n    );\n  };\n  return <div>{buildDropdown()}</div>;\n}\n","import React from \"react\";\n\nimport \"./Ride.css\";\nimport Menu from \"../Menu/Menu\";\nimport StationPicker from \"../StationPicker/StationPicker\";\n\nexport default function Ride(props) {\n  return (\n    <div>\n      <Menu />\n      <div className=\"ride-page-content\">\n        <StationPicker {...props} allStations={props.allStations} />\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport Ride from \"../Ride/Ride\";\nimport Axios from \"axios\";\n\n// stationID: this.props.match.params.StationID\n\nexport default class Station extends Component {\n  state = {\n    station: {},\n    trains: {\n      northTrain1: { name: \"NB_Time1_Train\", data: {}, cars: {} },\n      northTrain2: { name: \"NB_Time2_Train\", data: {}, cars: {} },\n      northTrain3: { name: \"NB_Time3_Train\", data: {}, cars: {} },\n      southTrain1: { name: \"SB_Time1_Train\", data: {}, cars: {} },\n      southTrain2: { name: \"SB_Time2_Train\", data: {}, cars: {} },\n      southTrain3: { name: \"SB_Time3_Train\", data: {}, cars: {} }\n    }\n  };\n  componentDidMount() {\n    this.updateStation();\n  }\n\n  updateStation = async () => {\n    let result = await Axios.get(\n      `https://miami-transit-api.herokuapp.com/api/TrainTracker.json?StationID=${this.props.StationID}`\n    );\n    this.setState({ station: result.data.RecordSet.Record }, () => {\n      this.updateTrains();\n    });\n  };\n\n  updateTrains = prop => {\n    let names = this.state.trains;\n\n    Object.keys(names).map(async train => {\n      let update = await Axios.get(\n        `http://miami-transit-api.herokuapp.com/api/Trains.json?TrainID=${\n          this.state.station[names[train].name]\n        }`\n      );\n\n      if (this.state.station[names[train].name] === \"SCH\") {\n        update.data.RecordSet = \"Data currently not available for this train.\";\n      }\n\n      names[train] = {\n        ...names[train],\n        data: update.data.RecordSet\n      };\n\n      this.setState({ trains: names });\n    });\n  };\n\n  render() {\n    if (this.props.StationID !== this.state.station.StationID) {\n      this.updateStation();\n    }\n\n    return (\n      <div>\n        <Ride {...this.props} allStations={this.props.allStations} />\n        <h1>Welcome to {this.state.station.StationName} Station</h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Component } from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route } from \"react-router-dom\";\n\n// Components\nimport Home from \"./Components/Home/Home\";\nimport Ride from \"./Components/Ride/Ride\";\nimport Station from \"./Components/Station/Station\";\n\n// Styling\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    allStations: []\n  };\n\n  componentDidMount() {\n    // Get Station Data\n    axios\n      .get(`https://miami-transit-api.herokuapp.com/api/TrainStations.json`)\n      .then(res => {\n        let stationData = res.data.RecordSet.Record;\n\n        let stationArray = stationData.map(eachStation => {\n          let id = eachStation.StationID;\n          let stationName = eachStation.Station;\n          return { StationID: id, Station: stationName };\n        });\n\n        this.setState({ allStations: stationArray });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={props => <Home {...props} />} />\n          <Route\n            exact\n            path=\"/ride\"\n            render={props => (\n              <Ride {...props} allStations={this.state.allStations} />\n            )}\n          />\n          <Route\n            exact\n            path=\"/ride/:StationID\"\n            render={props => (\n              <Station\n                {...props}\n                allStations={this.state.allStations}\n                StationID={props.match.params.StationID}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// Create the collection\n// axios\n//   .post(\"https://ironrest.herokuapp.com/createCollection/winningTransit\")\n//   .then(res => {\n//     console.log(res.data);\n//   });\n\n// Post to the collection\n// axios\n//   .post(\"https://ironrest.herokuapp.com/winningTransit\", {\n//     testing: \"Winning\"\n//   })\n//   .then(res => {\n//     console.log(res.data);\n//   });\n\n// Delete an item from the collection.\n// axios\n//   .delete(\n//     \"https://ironrest.herokuapp.com/winningTransit/5dd43f3e7b55290017a2b1aa\"\n//   )\n//   .then(res => {\n//     console.log(res.data);\n//   });\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\n// Components\nimport App from \"./App\";\n\n// Styling\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Services\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}